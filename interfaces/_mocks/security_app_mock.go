// Code generated by MockGen. DO NOT EDIT.
// Source: application/security_app.go

// Package mock_application is a generated GoMock package.
package mock

import (
	entity "go-cource-api/domain/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSecurityAppInterface is a mock of SecurityAppInterface interface.
type MockSecurityAppInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSecurityAppInterfaceMockRecorder
}

// MockSecurityAppInterfaceMockRecorder is the mock recorder for MockSecurityAppInterface.
type MockSecurityAppInterfaceMockRecorder struct {
	mock *MockSecurityAppInterface
}

// NewMockSecurityAppInterface creates a new mock instance.
func NewMockSecurityAppInterface(ctrl *gomock.Controller) *MockSecurityAppInterface {
	mock := &MockSecurityAppInterface{ctrl: ctrl}
	mock.recorder = &MockSecurityAppInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecurityAppInterface) EXPECT() *MockSecurityAppInterfaceMockRecorder {
	return m.recorder
}

// FindUserByEmail mocks base method.
func (m *MockSecurityAppInterface) FindUserByEmail(email string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByEmail", email)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByEmail indicates an expected call of FindUserByEmail.
func (mr *MockSecurityAppInterfaceMockRecorder) FindUserByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByEmail", reflect.TypeOf((*MockSecurityAppInterface)(nil).FindUserByEmail), email)
}

// GenerateToken mocks base method.
func (m *MockSecurityAppInterface) GenerateToken(arg0 entity.User) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", arg0)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockSecurityAppInterfaceMockRecorder) GenerateToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockSecurityAppInterface)(nil).GenerateToken), arg0)
}

// HashPassword mocks base method.
func (m *MockSecurityAppInterface) HashPassword(arg0 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashPassword indicates an expected call of HashPassword.
func (mr *MockSecurityAppInterfaceMockRecorder) HashPassword(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockSecurityAppInterface)(nil).HashPassword), arg0)
}

// IsUserExists mocks base method.
func (m *MockSecurityAppInterface) IsUserExists(email string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserExists", email)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsUserExists indicates an expected call of IsUserExists.
func (mr *MockSecurityAppInterfaceMockRecorder) IsUserExists(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserExists", reflect.TypeOf((*MockSecurityAppInterface)(nil).IsUserExists), email)
}

// LoginUser mocks base method.
func (m *MockSecurityAppInterface) LoginUser(arg0, arg1 string) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", arg0, arg1)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockSecurityAppInterfaceMockRecorder) LoginUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockSecurityAppInterface)(nil).LoginUser), arg0, arg1)
}

// RegisterUser mocks base method.
func (m *MockSecurityAppInterface) RegisterUser(user *entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockSecurityAppInterfaceMockRecorder) RegisterUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockSecurityAppInterface)(nil).RegisterUser), user)
}

// VerifyPassword mocks base method.
func (m *MockSecurityAppInterface) VerifyPassword(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyPassword", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyPassword indicates an expected call of VerifyPassword.
func (mr *MockSecurityAppInterfaceMockRecorder) VerifyPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyPassword", reflect.TypeOf((*MockSecurityAppInterface)(nil).VerifyPassword), arg0, arg1)
}
